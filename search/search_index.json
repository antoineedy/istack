{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>     A lightweight image processing library   </p>"},{"location":"#about-the-project","title":"About The Project","text":"<p>IStacky is a lightweight image processing library based on the Ipywidgets library and designed to be used in Jupyter Notebooks. The main idea is to provide a simple and intuitive interface to stack images and apply number of modifications to them, such as cropping, resizing or background removal.</p> <p>This project has been made to be used in the context of machine learning and computer vision projects, where the user needs to quickly and easily create output images that combines several images: plots, photos, logos etc.</p> <p></p>"},{"location":"api/","title":"API reference","text":""},{"location":"api/#istacky.BlendedImage.BlendedImage","title":"BlendedImage","text":"<pre><code>BlendedImage(background, images, positions=None, opacities=None, background_resize=None, image_scales=None, remove=None, cropped=None, images_crop=None, code=None)\n</code></pre> <p>The one and only object of this package! </p> <p>Initiates the blended image, which is a superposition of images on a background. The images can be moved, resized and cropped, their opacity can be changed, their background color can be removed. The background can be cropped or expanded. The layers can be interchanged. </p> <p>The blended image can be displayed in a Jupyter Notebook, saved as a <code>PIL.Image.Image</code> or a <code>numpy.ndarray</code>. A code is generated to save the parameters of the blended image, and reproduce it later with different images.</p> <p>Parameters:</p> Name Type Description Default <code>background</code> <code>Image or ndarray</code> <p>Background image.</p> required <code>images</code> <code>Image or ndarray or list</code> <p>Image to superpose.</p> required <code>positions</code> <code>list or None</code> <p>Position of the image on the background.</p> <code>None</code> <code>opacities</code> <code>list or None</code> <p>Opacity of the image.</p> <code>None</code> <code>background_resize</code> <code>list or None</code> <p>Coefficient to resize the background.</p> <code>None</code> <code>image_scales</code> <code>list or None</code> <p>Height of the images in percentage of the background height.</p> <code>None</code> <code>remove</code> <code>list or None</code> <p>Remove specific color from the image.</p> <code>None</code> <code>cropped</code> <code>list or None</code> <p>Crop or expand the background.</p> <code>None</code> <code>images_crop</code> <code>list or None</code> <p>Crop the images.</p> <code>None</code> <code>code</code> <code>str or None</code> <p>Code to reproduce a previously created blended image.</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from istacky import BlendedImage\n&gt;&gt;&gt; from PIL import Image\n&gt;&gt;&gt; background = Image.open(\"background.jpg\")\n&gt;&gt;&gt; top_layer = Image.open(\"image1.jpg\")\n&gt;&gt;&gt; bottom_layer = Image.open(\"image2.jpg\")\n&gt;&gt;&gt; blended_image = BlendedImage(background, [top_layer, bottom_layer])\n</code></pre>"},{"location":"api/#istacky.BlendedImage.BlendedImage.editor","title":"editor","text":"<pre><code>editor()\n</code></pre> <p>Displays the GUI, an interface made of widgets which can be displayed in a Jupyter Notebook.</p> <p>Returns:</p> Type Description <code>widgets</code> <p>Widget to edit the blended image.</p>"},{"location":"api/#istacky.BlendedImage.BlendedImage.get_code","title":"get_code","text":"<pre><code>get_code()\n</code></pre> <p>Get the code to reproduce the blended image. A code is generated to save the parameters of the blended image, and reproduce it later with different images.</p> <p>Returns:</p> Type Description <code>str</code> <p>Code to reproduce the blended image.</p>"},{"location":"api/#istacky.BlendedImage.BlendedImage.show","title":"show","text":"<pre><code>show()\n</code></pre> <p>Show the blended image in a Jupyter Notebook.</p> <p>Returns:</p> Type Description <code>    None</code>"},{"location":"api/#istacky.BlendedImage.BlendedImage.to_array","title":"to_array","text":"<pre><code>to_array()\n</code></pre> <p>Return the blended image as a <code>numpy.ndarray</code>.</p> <p>Returns:</p> Type Description <code>ndarray</code> <p>Blended image.</p>"},{"location":"api/#istacky.BlendedImage.BlendedImage.to_image","title":"to_image","text":"<pre><code>to_image()\n</code></pre> <p>Return the blended image as a <code>PIL.Image.Image</code>.</p> <p>Returns:</p> Type Description <code>Image</code> <p>Blended image.</p>"},{"location":"contact/","title":"Contact","text":"<p>My name is Antoine EDY. Here are my LinkedIn and my Github profiles, and you can send me an email to antoineedy@outlook.fr.</p>"},{"location":"user_guide/","title":"User Guide","text":""},{"location":"user_guide/#installation","title":"Installation","text":""},{"location":"user_guide/#using-pip-recommended","title":"Using pip: (recommended)","text":"<pre><code>pip install istacky\n</code></pre>"},{"location":"user_guide/#install-and-run-from-source-code","title":"Install and run from source code:","text":"<p>Clone the repo, create a virtual environment and then install using pip: <pre><code>git clone https://github.com/antoineedy/istacky.git\ncd istacky\npython3 -m venv .\nsource bin/activate\npip install -e .\n</code></pre></p> <p>Warning</p> <p>The Ipywidgets library is not very stable when used in VSCode. <code>nbclient</code> and <code>nbconvert</code> are two requirements that will be automatically downloaded when installing IStacky, and that should make the library work in VSCode. However, if you encounter any problem, please use Jupyter Lab instead</p>"},{"location":"user_guide/#usage","title":"Usage","text":"<p>Example</p> <p>Have a look at this notebook for an example you can run at home!</p>"},{"location":"user_guide/#video-tutorial","title":"Video tutorial","text":"English versionFrench version"},{"location":"user_guide/#example","title":"Example","text":"<p>In our example, we want to create an output image, with a tennis point in background, and some plots, a circle and a logo on top of it. We will first import the libraries needed: <pre><code>from PIL import Image\nimport istacky\n</code></pre></p> <p>Then load the images we want to stack: <pre><code>background = Image.open(\"image/background.png\")\nplot = Image.open(\"image/plot.png\")\ncircle = Image.open(\"image/circle.png\")\nlogo = Image.open(\"image/logo.png\")\n</code></pre></p> <p>Create a <code>BlendedImage</code> object and display it: <pre><code>blended = istacky.BlendedImage(background, [plot, circle, logo])\nblended.show()\n</code></pre> </p> <p>The images are just stacked on top of each other! Let's apply some modifications to them: <pre><code>blended.editor()\n</code></pre> </p> <p>Calling editor displays a widget that allows you to apply modifications to the images. You can crop, resize, change the opacity, remove the background, add images, change the orders of the layers etc. In our case, we want to put the logo in one corner, circle the position of the ball and add a plot of the trajectory of the ball. After the changes, here is the final result:</p> <p><pre><code>blended.show()\n</code></pre> </p> <p>Now, if we want to apply the same modifications to another image, we can have access to the code that was used to create the final image, and apply it to another one: <pre><code>my_code = blended.get_code()\n</code></pre> Let's import the new images. <pre><code>background2 = Image.open(\"image/background2.png\")\nplot2 = Image.open(\"image/plot2.png\")\ncircle2 = Image.open(\"image/circle2.png\")\n</code></pre> We specify the code that was used to create the first image, and apply it to the new images: <pre><code>new_blended = istacky.BlendedImage(\n    background=plot2,\n    images = [plot2, circle2, logo],\n    code=my_code\n    )\n\nnew_blended.show()\n</code></pre> </p> <p>We can see that the modifications have been applied to the new images!</p>"},{"location":"user_guide/#gui-options","title":"GUI options","text":"Widget Function Values Switch between layers \\(l \\in \u27e61, N_{images}\u27e7\\) Reposition the image (\\(x\\) and \\(y\\) coordinates) \\(x \\in [-I_{w}, Bg_{w} + I{w}]\\) \\(y \\in [-Y_{h}, Bg_{h} + I_{h}]\\) Change the opacity of the selected layer \\(o\\in[0, 1]\\) Remove one color of the selected layer \\([r, g, b] \\in \u27e60, 255\u27e7^3\\) How close the removed colors must be from the selected color \\(t\\in[0, 100]\\) The height of the selected image in % of the background height \\(s\\in]0, 2]\\) Percentage of the selected image cropped in all 4 directions, and reseting the crop \\(c\\in[0, 100]\\) Show the selected layer in the final image \\(s\\in\\{True, False\\}\\) Crop or expand the background image (in pixels) in all 4 directions \\(c\\in \\mathbb{Z}\\) Reset the cropping of the background Copy the code of the current output to the clipboard Make a red border appear on the selected layer for editing purposes (does not appear on the final output) \\(v\\in\\{True, False\\}\\) Set the size of the image displayed in pixels to fit all screen sizes (does not change the output size) \\(d\\in]0, 1000]\\) Upload a new image to stack. Creates a new layer. To choose the new image to add from the user's computer. Made with ipyfilechooser"}]}